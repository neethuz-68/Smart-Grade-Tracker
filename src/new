package com.gradetracker.view;

import com.gradetracker.model.Subject;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.awt.event.ActionListener;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;


public class GradeEntryView extends JFrame {

    private JTextField semesterNumberField;
    private JComboBox<String> subjectDropdown;
    private JTextField creditField;
    private JComboBox<String> gradeDropdown;
    private JButton addRowButton;
    private JButton saveButton;
    private JButton viewAnalysisButton;
    private JButton logoutButton;
    private JButton dashboardButton; 
    private JLabel sgpaLabel;
    private JLabel cgpaLabel;

    // Record for returning single subject data
    public record SubjectData(String name, float credits, String gradeLetter) {}

    public GradeEntryView() {
        // --- Frame Setup ---
        setTitle("Enter Semester Grades");
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // Background Panel with Image
        URL imageUrl = getClass().getResource("/resources/bg1.jpg");
        ImageIcon bgIcon = (imageUrl != null) ? new ImageIcon(imageUrl) : null;
        Image bgImage = (bgIcon != null) ? bgIcon.getImage() : null;
        JPanel background = new JPanel(new BorderLayout()) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                if (bgImage != null) {
                    g.drawImage(bgImage, 0, 0, getWidth(), getHeight(), this);
                } else {
                    g.setColor(new Color(230, 230, 250));
                    g.fillRect(0, 0, getWidth(), getHeight());
                }
            }
        };

        // ===== NAVBAR =====
        JPanel navbar = new JPanel(new BorderLayout());
        navbar.setBackground(Color.WHITE);
        navbar.setPreferredSize(new Dimension(0, 70));
        navbar.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
        JLabel title = new JLabel("Smart Grade Tracker");
        title.setFont(new Font("Verdana", Font.BOLD, 22));
        title.setForeground(Color.DARK_GRAY);
        navbar.add(title, BorderLayout.WEST);

        // Dashboard and Logout buttons
        dashboardButton = new JButton("Dashboard");
        logoutButton = new JButton("Logout");
        styleNavButton(dashboardButton);
        styleNavButton(logoutButton);

        JPanel rightNavPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 20, 15));
        rightNavPanel.setBackground(Color.WHITE);
        rightNavPanel.add(dashboardButton);
        rightNavPanel.add(logoutButton);
        navbar.add(rightNavPanel, BorderLayout.EAST);

        // ===== CONTENT CARD =====
        JPanel contentCard = new JPanel(new GridBagLayout());
        contentCard.setBackground(new Color(255, 255, 255, 220));
        contentCard.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 15, 10, 15);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Semester Number Field
        semesterNumberField = new JTextField(15);
        semesterNumberField.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(Color.GRAY), 
                "Enter Semester", 
                TitledBorder.LEFT, 
                TitledBorder.TOP, 
                new Font("SansSerif", Font.PLAIN, 14)));
        semesterNumberField.setFont(new Font("SansSerif", Font.BOLD, 16));
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        contentCard.add(semesterNumberField, gbc);

        // Subject Input Panel
        JPanel subjectInputPanel = new JPanel(new GridBagLayout());
        subjectInputPanel.setOpaque(false);
        subjectInputPanel.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(Color.GRAY), 
                "Subject Details", 
                TitledBorder.LEFT, 
                TitledBorder.TOP, 
                new Font("SansSerif", Font.BOLD, 14)));
        
        GridBagConstraints inputGbc = new GridBagConstraints();
        inputGbc.insets = new Insets(5, 5, 5, 5);
        inputGbc.fill = GridBagConstraints.HORIZONTAL;
        inputGbc.weightx = 1.0;

        // Subject Dropdown
        JLabel subjectLabel = new JLabel("Subject:");
        subjectLabel.setFont(new Font("SansSerif", Font.PLAIN, 14));
        subjectDropdown = new JComboBox<>();
        subjectDropdown.setFont(new Font("SansSerif", Font.PLAIN, 14));
        inputGbc.gridx = 0;
        inputGbc.gridy = 0;
        inputGbc.weightx = 0.2;
        subjectInputPanel.add(subjectLabel, inputGbc);
        inputGbc.gridx = 1;
        inputGbc.weightx = 0.8;
        subjectInputPanel.add(subjectDropdown, inputGbc);

        // Credit Field (auto-filled, read-only)
        JLabel creditLabel = new JLabel("Credit:");
        creditLabel.setFont(new Font("SansSerif", Font.PLAIN, 14));
        creditField = new JTextField(10);
        creditField.setFont(new Font("SansSerif", Font.PLAIN, 14));
        creditField.setEditable(false);
        creditField.setBackground(Color.LIGHT_GRAY);
        inputGbc.gridx = 0;
        inputGbc.gridy = 1;
        inputGbc.weightx = 0.2;
        subjectInputPanel.add(creditLabel, inputGbc);
        inputGbc.gridx = 1;
        inputGbc.weightx = 0.8;
        subjectInputPanel.add(creditField, inputGbc);

        // Grade Dropdown
        JLabel gradeLabel = new JLabel("Grade:");
        gradeLabel.setFont(new Font("SansSerif", Font.PLAIN, 14));
        String[] grades = {"O", "A+", "A", "B+", "B", "C", "P", "F"};
        gradeDropdown = new JComboBox<>(grades);
        gradeDropdown.setFont(new Font("SansSerif", Font.PLAIN, 14));
        inputGbc.gridx = 0;
        inputGbc.gridy = 2;
        inputGbc.weightx = 0.2;
        subjectInputPanel.add(gradeLabel, inputGbc);
        inputGbc.gridx = 1;
        inputGbc.weightx = 0.8;
        subjectInputPanel.add(gradeDropdown, inputGbc);

        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.BOTH;
        contentCard.add(subjectInputPanel, gbc);

        // Results Panel
        JPanel resultsPanel = new JPanel(new GridLayout(1, 2, 20, 0));
        resultsPanel.setOpaque(false);
        sgpaLabel = createResultLabel("SGPA");
        cgpaLabel = createResultLabel("Updated CGPA");
        resultsPanel.add(sgpaLabel);
        resultsPanel.add(cgpaLabel);
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.anchor = GridBagConstraints.CENTER;
        contentCard.add(resultsPanel, gbc);

        // Bottom Buttons
        JPanel bottomButtons = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 0));
        bottomButtons.setOpaque(false);
        saveButton = new JButton("Save & Calculate");
        viewAnalysisButton = new JButton("View Analysis");
        styleActionButton(saveButton);
        styleActionButton(viewAnalysisButton);
        bottomButtons.add(saveButton);
        bottomButtons.add(viewAnalysisButton);
        gbc.gridy = 3;
        contentCard.add(bottomButtons, gbc);

        // Center Container
        JPanel centerContainer = new JPanel(new GridBagLayout());
        centerContainer.setOpaque(false);
        centerContainer.add(contentCard, new GridBagConstraints());
        
        background.add(navbar, BorderLayout.NORTH);
        background.add(centerContainer, BorderLayout.CENTER);
        this.add(background);

        // Add listener to update credit field when subject is selected
        subjectDropdown.addActionListener(e -> updateCreditField());
    }
    
    private void styleNavButton(JButton button) {
        button.setFont(new Font("SansSerif", Font.PLAIN, 14));
        button.setBackground(new Color(70, 130, 180));
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setPreferredSize(new Dimension(100, 35));
    }

    private void styleActionButton(JButton button) {
        button.setFont(new Font("SansSerif", Font.BOLD, 14));
        button.setBackground(new Color(34, 139, 34));
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setPreferredSize(new Dimension(160, 40));
    }

    private JLabel createResultLabel(String title) {
        JLabel label = new JLabel(" -- ", SwingConstants.CENTER);
        label.setFont(new Font("SansSerif", Font.BOLD, 20));
        label.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(Color.GRAY), title,
                TitledBorder.CENTER, TitledBorder.TOP));
        label.setPreferredSize(new Dimension(150, 80));
        return label;
    }

    private void updateCreditField() {
        String selected = (String) subjectDropdown.getSelectedItem();
        if (selected != null && !selected.isEmpty()) {
            // Extract credit from subject string (assuming format: "SubjectName (X credits)")
            if (selected.contains("(") && selected.contains("credits)")) {
                String creditStr = selected.substring(
                    selected.indexOf("(") + 1, 
                    selected.indexOf(" credits)")
                ).trim();
                creditField.setText(creditStr);
            }
        }
    }

    // ===== PUBLIC METHODS FOR CONTROLLER =====
    
    public void populateSubjectDropdown(List<Subject> subjects) {
        subjectDropdown.removeAllItems();
        subjectDropdown.addItem(""); // Empty option
        for (Subject subject : subjects) {
            String displayText = subject.getSubjectName() + " (" + subject.getCredits() + " credits)";
            subjectDropdown.addItem(displayText);
        }
    }

    public int getSemesterNumber() {
        try {
            return Integer.parseInt(semesterNumberField.getText().trim());
        } catch (NumberFormatException e) {
            return -1;
        }
    }

    public SubjectData getSingleSubjectData() {
        String selectedSubject = (String) subjectDropdown.getSelectedItem();
        String selectedGrade = (String) gradeDropdown.getSelectedItem();
        
        if (selectedSubject == null || selectedSubject.isEmpty() || selectedGrade == null) {
            return null;
        }
        
        // Extract subject name (before the parenthesis)
        String subjectName = selectedSubject.contains("(") 
            ? selectedSubject.substring(0, selectedSubject.indexOf("(")).trim()
            : selectedSubject;
        
        // Extract credits from the credit field
        float credits;
        try {
            credits = Float.parseFloat(creditField.getText().trim());
        } catch (NumberFormatException e) {
            return null;
        }
        
        return new SubjectData(subjectName, credits, selectedGrade);
    }

    public void displayResults(double sgpa, double cgpa) {
        sgpaLabel.setText(String.format("%.2f", sgpa));
        cgpaLabel.setText(String.format("%.2f", cgpa));
    }

    public void addSaveListener(ActionListener listener) {
        saveButton.addActionListener(listener);
    }

    public void addViewAnalysisListener(ActionListener listener) {
        viewAnalysisButton.addActionListener(listener);
    }

    public void addLogoutListener(ActionListener listener) {
        logoutButton.addActionListener(listener);
    }

    public void addDashboardListener(ActionListener listener) {
        dashboardButton.addActionListener(listener);
    }

    public void displayMessage(String message) {
        JOptionPane.showMessageDialog(this, message);
    }
}
